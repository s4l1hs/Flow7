name: Deploy

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      IMAGE_NAME: ${{ secrets.REGISTRY }}/flow7:${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}

      - name: Run container and perform CI smoke tests (authenticated)
        env:
          IMAGE: ${{ env.IMAGE_NAME }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          set -euo pipefail
          echo "Running smoke container from $IMAGE"
          # Run container in background with DEV_ALLOW_MISSING_FIREBASE to allow raw uid tokens
          docker run -d --name flow7-smoke \
            -e DATABASE_URL="${DATABASE_URL}" \
            -e DEV_ALLOW_MISSING_FIREBASE=1 \
            -e DISABLE_SCHEDULER=1 \
            -e SMOKE_TOKEN="${{ secrets.SMOKE_TOKEN }}" \
            -e CI_SMOKE_TOKEN="${{ secrets.CI_SMOKE_TOKEN }}" \
            -p 8000:8000 \
            ${IMAGE}

          # wait for health
          for i in $(seq 1 60); do
            if curl -fsS http://127.0.0.1:8000/health >/dev/null 2>&1; then
              echo "service healthy"
              break
            fi
            sleep 1
          done

          # run smoke script
          chmod +x scripts/ci_smoke_test.sh
          ./scripts/ci_smoke_test.sh

          docker stop flow7-smoke || true
          docker rm flow7-smoke || true

  migrate-and-deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pull image
        run: docker pull ${{ secrets.REGISTRY }}/flow7:${{ github.ref_name }}

      - name: Run migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          # If your DB requires extra envs (user, password), pass them here.
        run: |
          # Run alembic from the image so migrations run with the same codebase
          docker run --rm \
            -e DATABASE_URL="${DATABASE_URL}" \
            ${{ secrets.REGISTRY }}/flow7:${{ github.ref_name }} \
            /bin/sh -c "./scripts/migrate.sh"

      - name: Deploy (placeholder)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        run: |
<<<<<<< HEAD
          set -euo pipefail
          echo "Setting up kubectl"
          echo "$KUBE_CONFIG_DATA" | base64 --decode > kubeconfig
          export KUBECONFIG=$(pwd)/kubeconfig
          # install envsubst (gettext)
          sudo apt-get update -y
          sudo apt-get install -y gettext-base

          echo "Applying migration Job (image substituted)"
          envsubst < k8s/flow7-migration-job.yaml | kubectl apply -f -
          echo "Waiting for migration job to complete..."
          kubectl wait --for=condition=complete job/flow7-migrate --timeout=600s || (kubectl logs job/flow7-migrate --all-containers; exit 1)

          echo "Applying deployments/services"
          envsubst < k8s/flow7-deployment.yaml | kubectl apply -f -
          envsubst < k8s/flow7-scheduler-deployment.yaml | kubectl apply -f -

          echo "Waiting for rollout to complete"
          kubectl rollout status deployment/flow7 --timeout=300s
          echo "Waiting for scheduler rollout to complete"
          kubectl rollout status deployment/flow7-scheduler --timeout=300s

          echo "Applying Prometheus alert rules ConfigMap (if Prometheus present)"
          # create/update ConfigMap in the monitoring namespace
          kubectl create configmap flow7-prom-rules -n monitoring --from-file=prometheus_rules.yml=docs/alerts/prometheus_rules.yml --dry-run=client -o yaml | kubectl apply -f - || true
          # try to restart prometheus deployment to pick up new rules (best-effort)
          if kubectl get deployment -n monitoring prometheus >/dev/null 2>&1; then
            kubectl -n monitoring rollout restart deployment prometheus || true
            echo "Prometheus restart triggered"
          else
            echo "Prometheus deployment not found in 'monitoring' namespace; skipping restart"
          fi
          # Run in-cluster smoke tests via a Job. This tests the service from the cluster network
          echo "Applying in-cluster smoke test Job"
          envsubst < k8s/flow7-smoke-job.yaml | kubectl apply -f -
          echo "Waiting for smoke job to complete"
          kubectl wait --for=condition=complete job/flow7-smoke --timeout=300s || (
            echo "Smoke job failed - dumping logs";
            kubectl logs job/flow7-smoke --all-containers || true;
            kubectl describe job/flow7-smoke || true;
            exit 1
          )
          echo "Smoke job succeeded; cleaning up"
          kubectl delete job/flow7-smoke || true

          echo "Deployment applied and basic smoke checks passed."
=======
          echo "Deploy step is environment specific. Provide a KUBE_CONFIG secret and replace this step with your deployment commands (kubectl apply / helm upgrade)."
          # Example (uncomment and configure):
          # echo "$KUBE_CONFIG_DATA" | base64 --decode > kubeconfig
          # kubectl --kubeconfig=kubeconfig set image deployment/flow7 flow7=${{ secrets.REGISTRY }}/flow7:${{ github.ref_name }}
>>>>>>> parent of 1005162 (Bug Fixes)
